<snippet>
	<content><![CDATA[/**
 * View class for a list of ${1/(.+)/\L\1/g}.
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       1.5
 */
class ${TM_PROJECT/(.+)/\u\1/g}View${1:View_list} extends JViewLegacy
{
	protected \$items;

	protected \$pagination;

	protected \$state;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  A string if successful, otherwise a JError object.
	 *
	 * @since   1.6
	 */
	public function display(\$tpl = null)
	{
		// Initialise variables.
		\$this->state      = \$this->get('State');
		\$this->pagination = \$this->get('Pagination');
		\$this->items      = \$this->get('Items');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseError(500, implode("\n", \$errors));
			return false;
		}

		// Load the submenu.
		${TM_PROJECT/(.+)/\u\1/g}Helper::addSubmenu('${1/(.+)/\L\1/g}');

		\$this->addToolbar();
		\$this->sidebar = JHtmlSidebar::render();

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return  void
	 *
	 * @since   1.6
	 */
	protected function addToolbar()
	{
		require_once JPATH_COMPONENT . '/helpers/${TM_PROJECT/(.+)/\L\1/g}.php';

		\$state = \$this->get('State');
		\$canDo = ${TM_PROJECT/(.+)/\u\1/g}Helper::getActions(\$state->get('filter.category_id'));
		\$user  = JFactory::getUser();

		// Get the toolbar object instance
		\$bar = JToolBar::getInstance('toolbar');

		JToolbarHelper::title(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_MANAGER_${1/(.+)/\U\1/g}'), '${1/(.+)/\L\1/g}.png');

		if (count(\$user->getAuthorisedCategories('com_${TM_PROJECT/(.+)/\L\1/g}', 'core.create')) > 0)
		{
			JToolbarHelper::addNew('${2:${1/(.+)(s\b)/\L\1/g}}.add');
		}

		if (\$canDo->get('core.edit'))
		{
			JToolbarHelper::editList('${2/(.+)/\L\1/g}.edit');
		}

		if (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::publish('${1/(.+)/\L\1/g}.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('${1/(.+)/\L\1/g}.unpublish', 'JTOOLBAR_UNPUBLISH', true);

			JToolbarHelper::archiveList('${1/(.+)/\L\1/g}.archive');
			JToolbarHelper::checkin('${1/(.+)/\L\1/g}.checkin');
		}

		if (\$state->get('filter.state') == -2 && \$canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('', '${1/(.+)/\L\1/g}.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('${1/(.+)/\L\1/g}.trash');
		}

		// Add a batch button
		if (\$canDo->get('core.edit'))
		{
			JHtml::_('bootstrap.modal', 'collapseModal');
			\$title = JText::_('JTOOLBAR_BATCH');
			\$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">
						<i class=\"icon-checkbox-partial\" title=\"\$title\"></i>
						\$title</button>";
			\$bar->appendButton('Custom', \$dhtml, 'batch');
		}

		if (\$canDo->get('core.admin'))
		{
			JToolbarHelper::preferences('com_${TM_PROJECT/(.+)/\L\1/g}');
		}

		JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);

		JHtmlSidebar::setAction('index.php?option=com_${TM_PROJECT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}');

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_PUBLISHED'),
			'filter_state',
			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', \$this->state->get('filter.state'), true)
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_CATEGORY'),
			'filter_category_id',
			JHtml::_('select.options', JHtml::_('category.options', 'com_${TM_PROJECT/(.+)/\L\1/g}'), 'value', 'text', \$this->state->get('filter.category_id'))
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_ACCESS'),
			'filter_access',
			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', \$this->state->get('filter.access'))
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_LANGUAGE'),
			'filter_language',
			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', \$this->state->get('filter.language'))
		);
	}

	/**
	 * Returns an array of fields the table can be sorted by
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value
	 *
	 * @since   3.0
	 */
	protected function getSortFields()
	{
		return array(
			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),
			'a.state' => JText::_('JSTATUS'),
			'a.${3:title}' => JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_HEADING_${3/(.+)/\U\1/g}'),
			'a.access' => JText::_('JGRID_HEADING_ACCESS'),
			'a.hits' => JText::_('JGLOBAL_HITS'),
			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),
			'a.id' => JText::_('JGRID_HEADING_ID')
		);
	}
}

]]></content>
	<tabTrigger>jadminviewlist</tabTrigger>
</snippet>
