<snippet>
	<content><![CDATA[/**
 * Methods supporting a list of ${2:${1/(.+)(s\b)/\L\1/g}} records.
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       1.6
 */
class ${TM_PROJECT/(.+)/\u\1/g}Model${1:Model_list} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   1.6
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${3:title}', 'a.${3/(.+)/\L\1/g}',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'state', 'a.state',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'ordering', 'a.ordering',
				'featured', 'a.featured',
				'language', 'a.language',
				'hits', 'a.hits',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   1.6
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Initialise variables.
		\$app = JFactory::getApplication('administrator');
		\$input = \$app->input;

		// Adjust the context to support modal layouts.
		if (\$layout = \$input->get('layout'))
		{
			\$this->context .= '.' . \$layout;
		}

		// Load the filter state.
		\$search = \$this->getUserStateFromRequest(\$this->context . '.filter.search', 'filter_search');
		\$this->setState('filter.search', \$search);

		\$accessId = \$this->getUserStateFromRequest(\$this->context . '.filter.access', 'filter_access', null, 'int');
		\$this->setState('filter.access', \$accessId);

		\$published = \$this->getUserStateFromRequest(\$this->context . '.filter.state', 'filter_state', '', 'string');
		\$this->setState('filter.state', \$published);

		\$language = \$this->getUserStateFromRequest(\$this->context . '.filter.language', 'filter_language', '');
		\$this->setState('filter.language', \$language);

		// Load the parameters.
		\$params = JComponentHelper::getParams('com_${TM_PROJECT/(.+)/\L\1/g}');
		\$this->setState('params', \$params);

		// List state information.
		parent::populateState('a.${3/(.+)/\L\1/g}', 'asc');
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 *
	 * @since   1.6
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= ':' . \$this->getState('filter.search');
		\$id .= ':' . \$this->getState('filter.access');
		\$id .= ':' . \$this->getState('filter.state');
		\$id .= ':' . \$this->getState('filter.language');

		return parent::getStoreId(\$id);
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return  JDatabaseQuery
	 *
	 * @since   1.6
	 */
	protected function getListQuery()
	{
		// Create a new query object.
		\$db    = \$this->getDbo();
		\$query = \$db->getQuery(true);
		\$user  = JFactory::getUser();

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.id, a.${3/(.+)/\L\1/g}, a.alias, a.checked_out, a.checked_out_time' .
				', a.hits' .
				', a.state, a.access, a.ordering, a.language, a.publish_up, a.publish_down'
			)
		);
		\$query->from(\$db->quoteName('#__${TM_PROJECT/(.+)/\L\1/g}${4:_${1/(.+)/\L\1/g}}') . ' AS a');

		// Join over the language
		\$query->select('l.title AS language_title');
		\$query->join('LEFT', \$db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');

		// Join over the users for the checked out user.
		\$query->select('uc.name AS editor');
		\$query->join('LEFT', '#__users AS uc ON uc.id = a.checked_out');

		// Join over the asset groups.
		\$query->select('ag.title AS access_level');
		\$query->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');

		// Filter by access level.
		if (\$access = \$this->getState('filter.access'))
		{
			\$query->where('a.access = ' . (int) \$access);
		}

		// Implement View Level Access
		if (!\$user->authorise('core.admin'))
		{
			\$groups = implode(',', \$user->getAuthorisedViewLevels());
			\$query->where('a.access IN (' . \$groups . ')');
		}

		// Filter by published state
		\$publ