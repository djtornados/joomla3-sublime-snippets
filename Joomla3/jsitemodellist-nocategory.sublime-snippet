<snippet>
	<content><![CDATA[/**
 * This models supports retrieving lists of ${1/(.+)/\L\1/g}.
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_PROJECT/(.+)/\u\1/g}Model${1:Plural} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${2:title}', 'a.${2/(.+)/\L\1/g}',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'state', 'a.state',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'ordering', 'a.ordering',
				'featured', 'a.featured',
				'language', 'a.language',
				'hits', 'a.hits',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Get the configuration options.
		\$app    = JFactory::getApplication();
		\$input  = \$app->input;
		\$params = JComponentHelper::getParams('com_${TM_PROJECT/(.+)/\L\1/g}');
		\$user   = JFactory::getUser();

		// Optional filter text.
		\$search = \$input->getString('filter-search');
		\$this->setState('list.filter', \$search);

		// List state information.
		\$limit = \$app->getUserStateFromRequest('global.list.limit', 'limit', \$app->getCfg('list_limit'), 'uint');
		\$this->setState('list.limit', \$limit);

		\$limitstart = \$input->get('limitstart', 0, 'uint');
		\$this->setState('list.start', \$limitstart);

		// Load the ordering.
		\$orderCol = \$app->getUserStateFromRequest('com_${TM_PROJECT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'a.ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		// Load the direction.
		\$listOrder = \$app->getUserStateFromRequest('com_${TM_PROJECT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.list.' . $itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		// Load the parameters.
		\$this->setState('params', \$params);

		// Process show_noauth parameter.
		if (!\$params->get('show_noauth'))
		{
			\$this->setState('filter.access', true);
		}
		else
		{
			\$this->setState('filter.access', false);
		}

		if ((!\$user->authorise('core.edit.state', 'com_${TM_PROJECT/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${TM_PROJECT/(.+)/\L\1/g}')))
		{
			// Limit to published for people who can't edit or edit.state.
			\$this->setState('filter.state', 1);

			// Filter by start and end dates.
			\$this->setState('filter.publish_date', true);
		}

		// Load the language.
		\$this->setState('filter.language', \$app->getLanguageFilter());

		// Load the layout.
		\$this->setState('layout', \$input->get('layout'));
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= ':' . \$this->getState('filter.search');
		\$id .= ':' . \$this->getState('filter.access');
		\$id .= ':' . \$this->getState('filter.state');
		\$id .= ':' . \$this->getState('filter.language');

		return parent::getStoreId(\$id);
	}

	/**
	 * Method to get a list of items.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getItems()
	{
		// Invoke the parent getItems method to get the main list.
		\$items = parent::getItems();

		// Convert the params field into an object, saving original in _params.
		for (\$i = 0, \$n = count(\$items); \$i < \$n; \$i++)
		{
			\$item = &\$items[\$i];

			if (!isset(\$this->_params))
			{
				\$params = new JRegistry;
				\$params->loadString(\$item->params);
				\$item->params = \$params;
			}
		}

		return \$items;
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Initialiase variables.
		\$user   = JFactory::getUser();
		\$groups = implode(', ', \$user->getAuthorisedViewLevels());

		// Create a new query object.
		\$db     = \$this->getDbo();
		\$query  = \$db->getQuery(true);

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.id, a.${2/(.+)/\L\1/g}, a.alias, a.checked_out, a.checked_out_time'
				. ', a.hits'
				. ', a.state, a.ordering, a.access, a.language, a.params, a.created, a.created_by_alias, a.publish_up, a.publish_down'
			)
		);
		\$query->from(\$db->quoteName('#__${TM_PROJECT/(.+)/\L\1/g}${3:_${1/(.+)/\L\1/g}}') . ' AS a');

		// Join over the users for the author and modified_by names.
		\$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author");
		\$query->select("ua.email AS author_email");

		\$query->join('LEFT', '#__users AS ua ON ua.id = a.created_by');
		\$query->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');

		// Filter by access level.
		if (\$access = \$this->getState('filter.access'))
		{
			\$query->where('a.access IN (' . \$groups . ')');
		}

		// Filter by state.
		\$state = \$this->getState('filter.state');

		if (is_numeric(\$state))
		{
			\$query->where('a.state = ' . (int) \$state);

			// Filter by start and end dates.
			\$nullDate = \$db->quote(\$db->getNullDate());
			\$date = JFactory::getDate();
			\$nowDate = \$db->quote(\$date->toSql());
			\$query->where('(a.publish_up = ' . \$nullDate . ' OR a.publish_up <= ' . \$nowDate . ')');
			\$query->where('(a.publish_down = ' . \$nullDate . ' OR a.publish_down >= ' . \$nowDate . ')');
		}

		// Filter by search in ${2/(.+)/\L\1/g}.
		\$search = \$this->getState('list.filter');

		if (!empty(\$search))
		{
			\$search = \$db->Quote('%' . \$db->escape(\$search, true) . '%');
			\$query->where('(a.${2/(.+)/\L\1/g} LIKE ' . \$search . ')');
		}

		// Filter by language.
		if (\$this->getState('filter.language'))
		{
			\$query->where('a.language in (' . \$db->quote(JFactory::getLanguage()->getTag()) . ', ' . \$db->quote('*') . ')');
		}

		// Add the list ordering clause.
		\$orderCol = \$this->getState('list.ordering', 'a.ordering');
		\$query->order(\$db->escape(\$orderCol) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		return \$query;
	}
}

]]></content>
	<tabTrigger>jsitemodellist-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
