<snippet>
	<content><![CDATA[// Load the backend controller.
require_once JPATH_ADMINISTRATOR . '/components/com_users/controllers/user.php';

/**
 * ${1/(.+)/\u\1/g} controller class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:Singular} extends UsersControllerUser
{
	/**
	 * Method to get a model object, loading it if required.
	 *
	 * @param   string  \$name    The model name. Optional.
	 * @param   string  \$prefix  The class prefix. Optional.
	 * @param   array   \$config  Configuration array for model. Optional.
	 *
	 * @return  object  The model.
	 *
	 * @since   $TM_VERSION
	 */
	public function getModel(\$name = '${1/(.+)/\u\1/g}', \$prefix = '${TM_COMPONENT/(.+)/\u\1/g}Model', \$config = array('ignore_request' => true))
	{
		\$model = parent::getModel(\$name, \$prefix, \$config);

		return \$model;
	}

	/**
	 * Method to run batch operations.
	 *
	 * @param   JModelLegacy  \$model  The model of the component being processed.
	 *
	 * @return	boolean	 True if successful, false otherwise and internal error is set.
	 *
	 * @since	$TM_VERSION
	 */
	public function batch(\$model = null)
	{
		// Check for request forgeries.
		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));

		// Set the model.
		\$model = \$this->getModel('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array());

		// Preset the redirect.
		\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${2:${1/(.+)/\L\1/g}s}' . \$this->getRedirectToListAppend(), false));

		\$vars = \$this->input->post->get('batch', array(), 'array');
		\$cid  = \$this->input->post->get('cid', array(), 'array');

		// Build an array of item contexts to check.
		\$contexts = array();

		foreach (\$cid as \$id)
		{
			// If we're coming from com_categories, we need to use extension vs. option.
			if (isset(\$this->extension))
			{
				\$option = \$this->extension;
			}
			else
			{
				\$option = \$this->option;
			}

			\$contexts[\$id] = \$option . '.' . \$this->context . '.' . \$id;
		}

		// Attempt to run the batch operation.
		if (\$model->batch(\$vars, \$cid, \$contexts))
		{
			\$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_BATCH'));
			return true;
		}
		else
		{
			\$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_FAILED', \$model->getError()));
			return false;
		}
	}

	/**
	 * Overrides parent save method to check the submitted passwords match.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).
	 *
	 * @return  boolean  True if successful, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function save(\$key = null, \$urlVar = null)
	{
		// Get the form data.
		\$data = \$this->input->post->get('jform', array(), 'array');

		// TODO: JForm should really have a validation handler for this.
		if (isset(\$data['password']) && isset(\$data['password2']))
		{
			// Check the passwords match.
			if (\$data['password'] != \$data['password2'])
			{
				\$this->setMessage(JText::_('JLIB_USER_ERROR_PASSWORD_NOT_MATCH'), 'warning');
				\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}&layout=edit', false));
			}

			unset(\$data['password2']);
		}

		return parent::save();
	}
}

]]></content>
	<tabTrigger>jadmincontrolleredit-user</tabTrigger>
	<scope>source.php</scope>
</snippet>
