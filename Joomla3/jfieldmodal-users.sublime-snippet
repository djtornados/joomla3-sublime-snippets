<snippet>
	<content><![CDATA[/**
 * Field to select a ${2:${1/(.+)(s\b)/\L\1/g}} id from a modal list.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class JFormFieldModal_${1:Plural} extends JFormField
{
	/**
	 * The form field type.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$type = 'Modal_${1/(.+)/\u\1/g}';

	/**
	 * Method to get the ${2/(.+)/\L\1/g} field input markup.
	 *
	 * @return  string  The field input markup.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getInput()
	{
		\$html = array();
		\$attr = '';

		\$groups = \$this->getGroups();
		\$excluded = \$this->getExcluded();
		\$link = 'index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&amp;view=${1/(.+)/\L\1/g}&amp;layout=modal&amp;tmpl=component&amp;field=' . \$this->id
			. (isset(\$groups) ? ('&amp;groups=' . base64_encode(json_encode(\$groups))) : '')
			. (isset(\$excluded) ? ('&amp;excluded=' . base64_encode(json_encode(\$excluded))) : '');

		// Initialize some field attributes.
		\$attr .= \$this->element['class'] ? ' class="' . (string) \$this->element['class'] . '"' : '';
		\$attr .= \$this->element['size'] ? ' size="' . (int) \$this->element['size'] . '"' : '';

		// Initialize JavaScript field attributes.
		\$onchange = (string) \$this->element['onchange'];

		// Load the modal behavior script.
		JHtml::_('behavior.modal', 'a.modal_' . \$this->id);

		// Build the script.
		\$script = array();
		\$script[] = '	function jSelect${2/(.+)/\u\1/g}_' . \$this->id . '(id, title) {';
		\$script[] = '		var old_id = document.getElementById("' . \$this->id . '_id").value;';
		\$script[] = '		if (old_id != id) {';
		\$script[] = '			document.getElementById("' . \$this->id . '_id").value = id;';
		\$script[] = '			document.getElementById("' . \$this->id . '_name").value = title;';
		\$script[] = '			' . \$onchange;
		\$script[] = '		}';
		\$script[] = '		SqueezeBox.close();';
		\$script[] = '	}';

		// Add the script to the document head.
		JFactory::getDocument()->addScriptDeclaration(implode("\n", \$script));

		// Load the current username if available.
		\$table = JTable::getInstance('user');

		if (\$this->value)
		{
			\$table->load(\$this->value);
		}
		else
		{
			\$table->username = JText::_('JLIB_FORM_SELECT_USER');
		}

		// Create a dummy text field with the ${2/(.+)/\L\1/g} name.
		\$html[] = '<div class="input-append">';
		\$html[] = '	<input class="input-medium" type="text" id="' . \$this->id . '_name"' . ' value="' . htmlspecialchars(\$table->name, ENT_COMPAT, 'UTF-8') . '"'
			. ' disabled="disabled"' . \$attr . ' />';

		// Create the ${2/(.+)/\L\1/g} select button.
		if (\$this->element['readonly'] != 'true')
		{
			\$html[] = '		<a class="btn btn-primary modal_' . \$this->id . '" title="' . JText::_('JLIB_FORM_CHANGE_USER') . '"' . ' href="' . \$link . '"'
				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';
			\$html[] = '<i class="icon-user"></i></a>';
		}

		\$html[] = '</div>';

		// Create the real field, hidden, that stored the ${2/(.+)/\L\1/g} id.
		\$html[] = '<input type="hidden" id="' . \$this->id . '_id" name="' . \$this->name . '" value="' . (int) \$this->value . '" />';

		return implode("\n", \$html);
	}

	/**
	 * Method to get the filtering groups (null means no filtering).
	 *
	 * @return  mixed  array of filtering groups or null.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getGroups()
	{
		\$groups = explode(',', \$this->element['groups']);

		if (empty(\$groups))
		{
			return null;
		}

		return \$groups;
	}

	/**
	 * Method to get the ${1/(.+)/\L\1/g} to exclude from the list of ${1/(.+)/\L\1/g}.
	 *
	 * @return  mixed  Array of ${1/(.+)/\L\1/g} to exclude or null to to not exclude them.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getExcluded()
	{
		return null;
	}
}

]]></content>
	<tabTrigger>jfieldmodal-users</tabTrigger>
	<scope>source.php</scope>
</snippet>
