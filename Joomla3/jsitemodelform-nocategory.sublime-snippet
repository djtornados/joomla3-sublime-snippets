<snippet>
	<content><![CDATA[// Base this model on the backend version.
require_once JPATH_COMPONENT_ADMINISTRATOR . '/models/${2:view_edit}.php';

/**
 * ${TM_PROJECT/(.+)/\u\1/g} Component ${2/(.+)/\u\1/g} Model
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       1.6
 */
class ${TM_PROJECT/(.+)/\u\1/g}Model${1:Form} extends ${TM_PROJECT/(.+)/\u\1/g}Model${2/(.+)/\u\1/g}
{
	/**
	 * Get the return URL.
	 *
	 * @return  string  The return URL.
	 *
	 * @since   1.6
	 */
	public function getReturnPage()
	{
		return base64_encode(\$this->getState('return_page'));
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @return  void
	 *
	 * @since   1.6
	 */
	protected function populateState()
	{
		\$app = JFactory::getApplication();

		// Load state from the request.
		\$pk = \$app->input->getInt('${2/(.)(.+)/\L\1/g}_id');
		\$this->setState('${2/(.+)/\L\1/g}.id', \$pk);

		// Add compatibility variable for default naming conventions.
		\$this->setState('${1/(.+)/\L\1/g}.id', \$pk);

		\$return = \$app->input->get('return', null, 'base64');

		if (!JUri::isInternal(base64_decode(\$return)))
		{
			\$return = null;
		}

		\$this->setState('return_page', base64_decode(\$return));

		// Load the parameters.
		\$params = \$app->getParams();
		\$this->setState('params', \$params);

		\$this->setState('layout', \$app->input->get('layout'));
	}

	/**
	 * Method to get ${2/(.+)/\L\1/g} data.
	 *
	 * @param   integer  \$itemId  The id of the ${2/(.+)/\L\1/g}.
	 *
	 * @return  mixed  ${TM_PROJECT/(.+)/\u\1/g} item data object on success, false on failure.
	 *
	 * @since   1.6
	 */
	public function getItem(\$itemId = null)
	{
		\$itemId = (int) (!empty(\$itemId)) ? \$itemId : \$this->getState('${2/(.+)/\L\1/g}.id');

		// Get a row instance.
		\$table = \$this->getTable();

		// Attempt to load the row.
		\$return = \$table->load(\$itemId);

		// Check for a table object error.
		if (\$return === false && \$table->getError())
		{
			\$this->setError(\$table->getError());
			return false;
		}

		\$properties = \$table->getProperties(1);
		\$value = JArrayHelper::toObject(\$properties, 'JObject');

		// Convert attrib field to Registry.
		\$value->params = new JRegistry;
		\$value->params->loadString(\$value->attribs);

		// Compute selected asset permissions.
		\$user   = JFactory::getUser();
		\$userId = \$user->get('id');
		\$asset  = 'com_${TM_PROJECT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}.' . \$value->id;

		// Check general edit permission first.
		if (\$user->authorise('core.edit', \$asset))
		{
			\$value->params->set('access-edit', true);
		}
		// Now check if edit.own is available.
		elseif (!empty(\$userId) && \$user->authorise('core.edit.own', \$asset))
		{
			// Check for a valid user and that they are the owner.
			if (\$userId == \$value->created_by)
			{
				\$value->params->set('access-edit', true);
			}
		}

		// Check edit state permission.
		if (\$itemId)
		{
			// Existing item
			\$value->params->set('access-change', \$user->authorise('core.edit.state', \$asset));
		}
		else
		{
			// New item.
			\$value->params->set('access-change', \$user->authorise('core.edit.state', 'com_${TM_PROJECT/(.+)/\L\1/g}'));
		}

		return \$value;
	}
}

]]></content>
	<tabTrigger>jsitemodelform-nocategory</tabTrigger>
</snippet>
