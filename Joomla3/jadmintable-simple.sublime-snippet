<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} Table class.
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_PROJECT/(.+)/\u\1/g}Table${1:Table_edit} extends JTable
{
	/**
	 * Constructor
	 *
	 * @param   JDatabase  &\$db  Driver A database connector object.
	 *
	 * @since   $TM_VERSION
	 */
	public function __construct(& \$db)
	{
		parent::__construct('#__${TM_PROJECT/(.+)/\L\1/g}${2:_${1/(.+)/\L\1/g}s}', 'id', \$db);
	}

	/**
	 * Overloaded bind function to pre-process the params.
	 *
	 * @param   array  \$array   Named array.
	 * @param   mixed  \$ignore  An optional array or space separated list of properties
	 *                          to ignore while binding. [optional]
	 *
	 * @return  null|string  Null is operation was satisfactory, otherwise returns an error.
	 *
	 * @see     JTable:bind
	 * @since   $TM_VERSION
	 */
	public function bind(\$array, \$ignore = '')
	{
		if (isset(\$array['params']) && is_array(\$array['params']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['params']);
			\$array['params'] = (string) \$registry;
		}

		return parent::bind(\$array, \$ignore);
	}

	/**
	 * Overloaded check method to ensure data integrity.
	 *
	 * @return  boolean  True on success.
	 *
	 * @see     JTable::check
	 * @since   $TM_VERSION
	 */
	public function check()
	{
		// Check for valid ${4/(.+)/\L\1/g}.
		if (trim(\$this->${4:title}) == '')
		{
			\$this->setError(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}'));
			return false;
		}

		// Check for existing ${4/(.+)/\L\1/g}.
		\$query = 'SELECT id FROM #__${TM_PROJECT/(.+)/\L\1/g}${2/(.+)/\L\1/g} WHERE ${4/(.+)/\L\1/g} = ' . \$this->_db->Quote(\$this->${4/(.+)/\L\1/g});
		\$this->_db->setQuery(\$query);

		\$xid = (int) \$this->_db->loadResult();

		if (\$xid && \$xid != (int) \$this->id)
		{
			\$this->setError(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}_EXISTS'));
			return false;
		}

		// Set alias.
		if (empty(\$this->alias))
		{
			\$this->alias = \$this->${4/(.+)/\L\1/g};
		}

		\$this->alias = JApplication::stringURLSafe(\$this->alias);

		if (trim(str_replace('-', '', \$this->alias)) == '')
		{
			\$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");
		}

		return true;
	}

	/**
	 * Overload the store method for the ${3:${1/(.+)/\u\1/g}s} table.
	 *
	 * @param   boolean  \$updateNulls  Toggle whether null values should be updated.
	 *
	 * @return  boolean  True on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function store(\$updateNulls = false)
	{
		// Initialiase variables.
		\$date = JFactory::getDate();
		\$user = JFactory::getUser();

		if (\$this->id)
		{
			// Existing item.
			\$this->modified    = \$date->toSql();
			\$this->modified_by = \$user->get('id');
		}
		else
		{
			// New ${1/(.+)/\L\1/g}. A ${1/(.+)/\L\1/g} created and created_by field can be set by the user,
			// so we don't touch either of these if they are set.
			if (!(int) \$this->created)
			{
				\$this->created = \$date->toSql();
			}

			if (empty(\$this->created_by))
			{
				\$this->created_by = \$user->get('id');
			}
		}

		// Verify that the alias is unique.
		\$table = JTable::getInstance('${1/(.+)/\u\1/g}', '${TM_PROJECT/(.+)/\u\1/g}Table');

		if (\$table->load(array('alias' => \$this->alias)) && (\$table->id != \$this->id || \$this->id == 0))
		{
			\$this->setError(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_ERROR_UNIQUE_ALIAS'));
			return false;
		}

		// Attempt to store the user data.
		return parent::store(\$updateNulls);
	}

	/**
	 * Method to set the publishing state for a row or list of rows in the database
	 * table. The method respects checked out rows by other users and will attempt
	 * to checkin rows that it can after adjustments are made.
	 *
	 * @param   mixed    \$pks     An optional array of primary key values to update.  If not
	 *                            set the instance property value is used.
	 * @param   integer  \$state   The publishing state. eg. [0 = unpublished, 1 = published]
	 * @param   integer  \$userId  The user id of the user performing the operation.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 */
	public function publish(\$pks = null, \$state = 1, \$userId = 0)
	{
		// Initialiase variables.
		\$k = \$this->_tbl_key;

		// Sanitize input.
		JArrayHelper::toInteger(\$pks);
		\$userId = (int) \$userId;
		\$state  = (int) \$state;

		// If there are no primary keys set check to see if the instance key is set.
		if (empty(\$pks))
		{
			if (\$this->\$k)
			{
				\$pks = array(\$this->\$k);
			}
			// Nothing to set publishing state on, return false.
			else
			{
				\$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));
				return false;
			}
		}

		// Build the WHERE clause for the primary keys.
		\$where = \$k . '=' . implode(' OR ' . \$k . '=', \$pks);

		// Determine if there is checkin support for the table.
		if (!property_exists(\$this, 'checked_out') || !property_exists(\$this, 'checked_out_time'))
		{
			\$checkin = '';
		}
		else
		{
			\$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) \$userId . ')';
		}

		// Update the publishing state for rows with the given primary keys.
		\$this->_db->setQuery(
			'UPDATE ' . \$this->_db->quoteName(\$this->_tbl) .
			' SET ' . \$this->_db->quoteName('state') . ' = ' . (int) \$state .
			' WHERE (' . \$where . ')' .
			\$checkin
		);

		try
		{
			\$this->_db->execute();
		}
		catch (RuntimeException \$e)
		{
			\$this->setError(\$e->getMessage());
			return false;
		}

		// If checkin is supported and all rows were adjusted, check them in.
		if (\$checkin && (count(\$pks) == \$this->_db->getAffectedRows()))
		{
			// Checkin the rows.
			foreach (\$pks as \$pk)
			{
				\$this->checkin(\$pk);
			}
		}

		// If the JTable instance value is in the list of primary keys that were set, set the instance.
		if (in_array(\$this->\$k, \$pks))
		{
			\$this->state = \$state;
		}

		\$this->setError('');

		return true;
	}
}

]]></content>
	<tabTrigger>jadmintable-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>
