<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} Table class.
 *
 * @package     ${TM_PROJECT/(.+)/\u\1/g}
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_PROJECT/(.+)/\u\1/g}Table${1:Table_edit} extends JTable
{
	/**
	 * Constructor
	 *
	 * @param   JDatabase  &\$db  Driver A database connector object.
	 *
	 * @since   $TM_VERSION
	 */
	public function __construct(& \$db)
	{
		parent::__construct('#__${TM_PROJECT/(.+)/\L\1/g}${2:_${1/(.+)/\L\1/g}s}', 'id', \$db);
	}

	/**
	 * Overloaded check method to ensure data integrity.
	 *
	 * @return  boolean  True on success.
	 *
	 * @see     JTable::check
	 * @since   $TM_VERSION
	 */
	public function check()
	{
		// Check for valid ${4/(.+)/\L\1/g}.
		if (trim(\$this->${4:title}) == '')
		{
			\$this->setError(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}'));
			return false;
		}

		// Check for existing ${4/(.+)/\L\1/g}.
		\$query = 'SELECT id FROM #__${TM_PROJECT/(.+)/\L\1/g}${2/(.+)/\L\1/g} WHERE ${4/(.+)/\L\1/g} = ' . \$this->_db->Quote(\$this->${4/(.+)/\L\1/g});
		\$this->_db->setQuery(\$query);

		\$xid = (int) \$this->_db->loadResult();

		if (\$xid && \$xid != (int) \$this->id)
		{
			\$this->setError(JText::_('COM_${TM_PROJECT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}_EXISTS'));
			return false;
		}

		return true;
	}

	/**
	 * Method to set the publishing state for a row or list of rows in the database
	 * table.
	 *
	 * @param   mixed    \$pks     An optional array of primary key values to update.  If not
	 *                            set the instance property value is used.
	 * @param   integer  \$state   The publishing state. eg. [0 = unpublished, 1 = published]
	 * @param   integer  \$userId  The user id of the user performing the operation.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 */
	public function publish(\$pks = null, \$state = 1, \$userId = 0)
	{
		// Initialiase variables.
		\$k = \$this->_tbl_key;

		// Sanitize input.
		JArrayHelper::toInteger(\$pks);
		\$userId = (int) \$userId;
		\$state  = (int) \$state;

		// If there are no primary keys set check to see if the instance key is set.
		if (empty(\$pks))
		{
			if (\$this->\$k)
			{
				\$pks = array(\$this->\$k);
			}
			// Nothing to set publishing state on, return false.
			else
			{
				\$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));
				return false;
			}
		}

		// Build the WHERE clause for the primary keys.
		\$where = \$k . '=' . implode(' OR ' . \$k . '=', \$pks);

		// Update the publishing state for rows with the given primary keys.
		\$this->_db->setQuery(
			'UPDATE ' . \$this->_db->quoteName(\$this->_tbl) .
			' SET ' . \$this->_db->quoteName('state') . ' = ' . (int) \$state .
			' WHERE (' . \$where . ')'
		);

		try
		{
			\$this->_db->execute();
		}
		catch (RuntimeException \$e)
		{
			\$this->setError(\$e->getMessage());
			return false;
		}

		// If the JTable instance value is in the list of primary keys that were set, set the instance.
		if (in_array(\$this->\$k, \$pks))
		{
			\$this->state = \$state;
		}

		\$this->setError('');

		return true;
	}
}

]]></content>
	<tabTrigger>jadmintable-mini</tabTrigger>
	<scope>source.php</scope>
</snippet>
