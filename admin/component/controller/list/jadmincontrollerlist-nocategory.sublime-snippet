<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} list controller class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JControllerAdmin
{
	/**
	 * The prefix to use with controller messages.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$text_prefix = 'COM_${TM_COMPONENT/(.+)/\U\1/g}_${1/(.+)/\U\1/g}';

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		parent::__construct(\$config);

		// ${1/(.+)/\u\1/g} default form can come from the ${1/(.+)/\L\1/g} or featured view.
		// Adjust the redirect view on the value of 'view' in the request.
		if (\$this->input->get('view') == 'featured')
		{
			\$this->view_list = 'featured';
		}

		\$this->registerTask('unfeatured', 'featured');
	}

	/**
	 * Method to toggle the featured setting of a list of ${2/(.+)/\L\1/g}.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	public function featured()
	{
		// Check for request forgeries.
		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));

		// Initialiase variables.
		\$user   = JFactory::getUser();
		\$ids    = \$this->input->get('cid', array(), 'array');
		\$values = array('featured' => 1, 'unfeatured' => 0);
		\$task   = \$this->getTask();
		\$value  = JArrayHelper::getValue(\$values, \$task, 0, 'int');

		// Access checks.
		foreach (\$ids as \$i => \$id)
		{
			if (!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}.' . (int) \$id))
			{
				// Prune items that you can not change.
				unset(\$ids[\$i]);

				throw new RuntimeException(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), 403);
			}
		}

		if (empty(\$ids))
		{
			throw new RuntimeException(JText::_('JERROR_NO_ITEMS_SELECTED'), 500);
		}
		else
		{
			// Get the model.
			\$model = \$this->getModel();

			// Publish the items.
			if (!\$model->featured(\$ids, \$value))
			{
				throw new RuntimeException(\$model->getError(), 500);
			}
		}

		\$this->setRedirect('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}');
	}

	/**
	 * Method to get a model object, loading it if required.
	 *
	 * @param   string  \$name    The model name. Optional.
	 * @param   string  \$prefix  The class prefix. Optional.
	 * @param   array   \$config  Configuration array for model. Optional.
	 *
	 * @return  object  The model.
	 *
	 * @since   $TM_VERSION
	 */
	public function getModel(\$name = '${2:${1/(.+)(s\b)/\u\1/g}}', \$prefix = '${TM_COMPONENT/(.+)/\u\1/g}Model', \$config = array('ignore_request' => true))
	{
		return parent::getModel(\$name, \$prefix, \$config);
	}

	/**
	 * Method to provide child classes the opportunity to process after the delete task.
	 *
	 * @param   JModelLegacy  \$model  The model for the component
	 * @param   mixed         \$ids    Array of ids deleted.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function postDeleteHook(JModelLegacy \$model, \$ids = null)
	{

	}
}

]]></content>
	<tabTrigger>jadmincontrollerlist-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
