<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} controller class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JControllerForm
{
	/**
	 * The prefix to use with controller messages.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$text_prefix = 'COM_${TM_COMPONENT/(.+)/\U\1/g}_${1/(.+)/\U\1/g}';

	/**
	 * Method to run batch operations.
	 *
	 * @param   object  \$model  The model.
	 *
	 * @return  boolean  True if successful, false otherwise and internal error is set.
	 *
	 * @since   $TM_VERSION
	 */
	public function batch(\$model = null)
	{
		// Check for request forgeries.
		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));

		// Set the model.
		\$model = \$this->getModel('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array());

		// Preset the redirect.
		\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${2:${1/(.+)/\L\1/g}s}' . \$this->getRedirectToListAppend(), false));

		return parent::batch(\$model);
	}

	/**
	 * Function that allows child controller access to model data after the data has been saved.
	 *
	 * @param   JModelLegacy  \$model      The data model object.
	 * @param   array         \$validData  The validated data.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function postSaveHook(JModelLegacy \$model, \$validData = array())
	{
		return;
	}
}

]]></content>
	<tabTrigger>jadmincontrolleredit-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>
