<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} controller class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JControllerForm
{
	/**
	 * The prefix to use with controller messages.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$text_prefix = 'COM_USERS_USER';

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @since   $TM_VERSION
	 * @see     JController
	 */
	public function __construct(\$config = array())
	{
		parent::__construct(\$config);

		// Load the users component language file.
		\$lang = JFactory::getLanguage();
		\$lang->load('com_users', JPATH_ADMINISTRATOR);
	}

	/**
	 * Overrides JControllerForm::allowEdit.
	 *
	 * Checks that non-Super Admins are not editing Super Admins.
	 *
	 * @param   array   \$data  An array of input data.
	 * @param   string  \$key   The name of the key for the primary key.
	 *
	 * @return  boolean  True if allowed, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	protected function allowEdit(\$data = array(), \$key = 'id')
	{
		// Check if this person is a Super Admin.
		if (JAccess::check(\$data[\$key], 'core.admin'))
		{
			// If I'm not a Super Admin, then disallow the edit.
			if (!JFactory::getUser()->authorise('core.admin'))
			{
				return false;
			}
		}

		return parent::allowEdit(\$data, \$key);
	}

	/**
	 * Method to run batch operations.
	 *
	 * @param   object  \$model  The model.
	 *
	 * @return  boolean  True on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function batch(\$model = null)
	{
		// Check for request forgeries.
		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));

		// Set the model.
		\$model = \$this->getModel('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array());

		// Preset the redirect.
		\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${2:${1/(.+)/\L\1/g}s}' . \$this->getRedirectToListAppend(), false));

		return parent::batch(\$model);
	}

	/**
	 * Overrides parent save method to check the submitted passwords match.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).
	 *
	 * @return  boolean  True if successful, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function save(\$key = null, \$urlVar = null)
	{
		// Initialiase variables.
		\$data = \$this->input->post->get('jform', array(), 'array');

		// TODO: JForm should really have a validation handler for this.
		if (isset(\$data['password']) && isset(\$data['password2']))
		{
			// Check the passwords match.
			if (\$data['password'] != \$data['password2'])
			{
				\$this->setMessage(JText::_('JLIB_USER_ERROR_PASSWORD_NOT_MATCH'), 'warning');
				\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}&layout=edit', false));
			}

			unset(\$data['password2']);
		}

		return parent::save();
	}
}

]]></content>
	<tabTrigger>jadmincontrolleredit-user</tabTrigger>
	<scope>source.php</scope>
</snippet>
