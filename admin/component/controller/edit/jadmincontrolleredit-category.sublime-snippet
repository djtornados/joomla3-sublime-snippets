<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} controller class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JControllerForm
{
	/**
	 * The prefix to use with controller messages.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$text_prefix = 'COM_${TM_COMPONENT/(.+)/\U\1/g}_${1/(.+)/\U\1/g}';

	/**
	 * Method override to check if you can add a new record.
	 *
	 * @param   array  \$data  An array of input data.
	 *
	 * @return  boolean
	 *
	 * @since   $TM_VERSION
	 */
	protected function allowAdd(\$data = array())
	{
		// Initialiase variables.
		\$user = JFactory::getUser();
		\$categoryId = JArrayHelper::getValue(\$data, 'catid', \$this->input->getInt('filter_category_id'), 'int');
		\$allow = null;

		if (\$categoryId)
		{
			// If the category has been passed in the data or URL check it.
			\$allow = \$user->authorise('core.create', \$this->option . '.category.' . \$categoryId);
		}

		if (\$allow === null)
		{
			// In the absense of better information, revert to the component permissions.
			return parent::allowAdd(\$data);
		}
		else
		{
			return \$allow;
		}
	}

	/**
	 * Method to check if you can add a new record.
	 *
	 * @param   array   \$data  An array of input data.
	 * @param   string  \$key   The name of the key for the primary key.
	 *
	 * @return  boolean
	 *
	 * @since   $TM_VERSION
	 */
	protected function allowEdit(\$data = array(), \$key = 'id')
	{
		// Initialiase variables.
		\$recordId = (int) isset(\$data[\$key]) ? \$data[\$key] : 0;
		\$categoryId = 0;

		if (\$recordId)
		{
			\$categoryId = (int) \$this->getModel()->getItem(\$recordId)->catid;
		}

		if (\$categoryId)
		{
			// The category has been set. Check the category permissions.
			return JFactory::getUser()->authorise('core.edit', \$this->option . '.category.' . \$categoryId);
		}
		else
		{
			// Since there is no asset tracking, revert to the component permissions.
			return parent::allowEdit(\$data, \$key);
		}
	}

	/**
	 * Method to run batch operations.
	 *
	 * @param   object  \$model  The model.
	 *
	 * @return  boolean  True if successful, false otherwise and internal error is set.
	 *
	 * @since   $TM_VERSION
	 */
	public function batch(\$model = null)
	{
		// Check for request forgeries.
		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));

		// Set the model.
		\$model = \$this->getModel('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array());

		// Preset the redirect.
		\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${2:${1/(.+)/\L\1/g}s}' . \$this->getRedirectToListAppend(), false));

		return parent::batch(\$model);
	}

	/**
	 * Function that allows child controller access to model data after the data has been saved.
	 *
	 * @param   JModelLegacy  \$model      The data model object.
	 * @param   array         \$validData  The validated data.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function postSaveHook(JModelLegacy \$model, \$validData = array())
	{
		\$task = \$this->getTask();

		if (\$task == 'save')
		{
			\$this->setRedirect(JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${2/(.+)/\L\1/g}', false));
		}
	}
}

]]></content>
	<tabTrigger>jadmincontrolleredit-category</tabTrigger>
	<scope>source.php</scope>
</snippet>
