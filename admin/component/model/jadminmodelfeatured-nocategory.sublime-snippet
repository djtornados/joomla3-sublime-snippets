<snippet>
	<content><![CDATA[// Load dependent classes.
require_once __DIR__ . '/${2:plural}.php';

/**
 * ${1/(.+)/\u\1/g} Model.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Model${1:Featured} extends ${TM_COMPONENT/(.+)/\u\1/g}Model${2/(.+)/\u\1/g}
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${3:title}', 'a.${3/(.+)/\L\1/g}',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'state', 'a.state',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'created_by_alias', 'a.created_by_alias',
				'ordering', 'a.ordering',
				'featured', 'a.featured',
				'language', 'a.language',
				'hits', 'a.hits',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
				'fp.ordering',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @param   boolean  \$resolveFKs  True to join selected foreign information.
	 *
	 * @return  string
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery(\$resolveFKs = true)
	{
		// Create a new query object.
		\$db = \$this->getDbo();
		\$query = \$db->getQuery(true);

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.id, a.${3/(.+)/\L\1/g}, a.alias, a.checked_out, a.checked_out_time' .
					', a.state, a.access, a.language, a.created, a.created_by_alias, a.hits' .
					', a.publish_up, a.publish_down'
			)
		);
		\$query->from('#__${TM_COMPONENT/(.+)/\L\1/g}${4:_${2/(.+)/\L\1/g}} AS a');

		// Join over the language
		\$query->select('l.title AS language_title')
			->join('LEFT', \$db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');

		// Join over the content table.
		\$query->select('fp.ordering')
			->join('INNER', '#__${TM_COMPONENT/(.+)/\L\1/g}${4/(.+)/\L\1/g}_frontpage AS fp ON fp.${5:${2/(.+)(s\b)/\L\1/g}}_id = a.id');

		// Join over the users for the checked out user.
		\$query->select('uc.name AS editor')
			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');

		// Join over the asset groups.
		\$query->select('ag.title AS access_level')
			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');

		// Join over the users for the author.
		\$query->select('ua.name AS author_name')
			->join('LEFT', '#__users AS ua ON ua.id = a.created_by');

		// Filter by access level.
		if (\$access = \$this->getState('filter.access'))
		{
			\$query->where('a.access = ' . (int) \$access);
		}

		// Filter by published state.
		\$published = \$this->getState('filter.published');

		if (is_numeric(\$published))
		{
			\$query->where('a.state = ' . (int) \$published);
		}
		elseif (\$published === '')
		{
			\$query->where('(a.state = 0 OR a.state = 1)');
		}

		// Filter on the level.
		if (\$level = \$this->getState('filter.level'))
		{
			\$query->where('c.level <= ' . ((int) \$level + (int) \$baselevel - 1));
		}

		// Filter by search in ${3/(.+)/\L\1/g}.
		\$search = \$this->getState('filter.search');

		if (!empty(\$search))
		{
			if (stripos(\$search, 'id:') === 0)
			{
				\$query->where('a.id = ' . (int) substr(\$search, 3));
			}
			else
			{
				\$search = \$db->quote('%' . \$db->escape(\$search, true) . '%');
				\$query->where('a.${3/(.+)/\L\1/g} LIKE ' . \$search . ' OR a.alias LIKE ' . \$search);
			}
		}

		// Filter on the language.
		if (\$language = \$this->getState('filter.language'))
		{
			\$query->where('a.language = ' . \$db->quote(\$language));
		}

		// Add the list ordering clause.
		\$query->order(\$db->escape(\$this->getState('list.ordering', 'a.${3/(.+)/\L\1/g}')) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		// echo nl2br(str_replace('#__', 'jos_', (string) \$query));

		return \$query;
	}
}

]]></content>
	<tabTrigger>jadminmodelfeatured-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
