<snippet>
	<content><![CDATA[/**
 * Methods supporting a list of ${3:user} ${2:${1/(.+)(s\b)/\L\1/g}} records.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Model${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'parent_id', 'a.parent_id',
				'title', 'a.title',
				'lft', 'a.lft',
				'rgt', 'a.rgt',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field. [optional]
	 * @param   string  \$direction  An optional direction. [optional]
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		\$app = JFactory::getApplication('administrator');

		// Load the filter state.
		\$search = \$this->getUserStateFromRequest(\$this->context . '.filter.search', 'filter_search');
		\$this->setState('filter.search', \$search);

		// Load the parameters.
		\$params = JComponentHelper::getParams('com_${TM_COMPONENT/(.+)/\L\1/g}');
		\$this->setState('params', \$params);

		// List state information.
		parent::populateState('a.lft', 'asc');
	}
	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= ':' . \$this->getState('filter.search');

		return parent::getStoreId(\$id);
	}

	/**
	 * Gets the list of groups and adds expensive joins to the result set.
	 *
	 * @return  mixed  An array of data items on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getItems()
	{
		\$db = \$this->getDbo();

		// Get a storage key.
		\$store = \$this->getStoreId();

		// Try to load the data from internal storage.
		if (empty(\$this->cache[\$store]))
		{
			\$items = parent::getItems();

			// Bail out on an error or empty list.
			if (empty(\$items))
			{
				\$this->cache[\$store] = \$items;

				return \$items;
			}

			// First pass: get list of the group id's and reset the counts.
			\$groupIds = array();
			foreach (\$items as \$item)
			{
				\$groupIds[] = (int) \$item->id;
				\$item->user_count = 0;
			}

			// Get the counts from the database only for the ${4:${3/(.+)/\L\1/g}s} in the list.
			\$query	= \$db->getQuery(true);

			// Count the objects in the ${3/(.+)/\L\1/g} ${2/(.+)/\L\1/g}.
			\$query->select('map.group_id, COUNT(DISTINCT map.user_id) AS user_count')
				->from(\$db->quoteName('#__user_usergroup_map') . ' AS map')
				->where('map.group_id IN (' . implode(',', \$groupIds) . ')')
				->group('map.group_id');

			\$db->setQuery(\$query);

			// Load the counts into an array indexed on the user id field.
			try
			{
				\$${4/(.+)/\L\1/g} = \$db->loadObjectList('group_id');
			}
			catch (RuntimeException \$e)
			{
				\$this->setError(\$e->getMessage);
				return false;
			}

			// Second pass: collect the group counts into the master items array.
			foreach (\$items as &\$item)
			{
				if (isset(\$${4/(.+)/\L\1/g}[\$item->id]))
				{
					\$item->user_count = \$${4/(.+)/\L\1/g}[\$item->id]->user_count;
				}
			}

			// Add the items to the internal cache.
			\$this->cache[\$store] = \$items;
		}

		return \$this->cache[\$store];
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return  JDatabaseQuery
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Create a new query object.
		\$db    = \$this->getDbo();
		\$query	= \$db->getQuery(true);

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.*'
			)
		);
		\$query->from(\$db->quoteName('#__usergroups') . ' AS a');

		// Add the level in the tree.
		\$query->select('COUNT(DISTINCT c2.id) AS level')
			->join('LEFT OUTER', \$db->quoteName('#__usergroups') . ' AS c2 ON a.lft > c2.lft AND a.rgt < c2.rgt')
			->group('a.id, a.lft, a.rgt, a.parent_id, a.title');

		// Filter the comments over the search string if set.
		\$search = \$this->getState('filter.search');

		if (!empty(\$search))
		{
			if (stripos(\$search, 'id:') === 0)
			{
				\$query->where('a.id = ' . (int) substr(\$search, 3));
			}
			else
			{
				\$search = \$db->quote('%' . \$db->escape(\$search, true) . '%');
				\$query->where('a.title LIKE ' . \$search);
			}
		}

		// Add the list ordering clause.
		\$query->order(\$db->escape(\$this->getState('list.ordering', 'a.lft')) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		//echo nl2br(str_replace('#__','jos_',\$query));

		return \$query;
	}
}

]]></content>
	<tabTrigger>jadminmodellist-groups</tabTrigger>
	<scope>source.php</scope>
</snippet>
