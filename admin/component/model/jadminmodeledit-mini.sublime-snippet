<snippet>
	<content><![CDATA[// Load the helper class.
require_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/${TM_COMPONENT/(.+)/\L\1/g}.php';

/**
 * Item Model for an ${1/(.+)/\u\1/g}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Model${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JModelAdmin
{
	/**
	 * The prefix to use with controller messages.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$text_prefix = 'COM_${TM_COMPONENT/(.+)/\U\1/g}_${1/(.+)/\U\1/g}';

	/**
	 * The type alias for this content type (for example, 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}').
	 *
	 * @var      string
	 * @since    $TM_VERSION
	 */
	public \$typeAlias = 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}';

	/**
	 * Method to test whether a record can be deleted.
	 *
	 * @param   object  \$record  A record object.
	 *
	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.
	 *
	 * @since   $TM_VERSION
	 */
	protected function canDelete(\$record)
	{
		if (!empty(\$record->id))
		{
			if (\$record->state != -2)
			{
				return;
			}

			// Get the current user object.
			\$user = JFactory::getUser();

			return \$user->authorise('core.delete', 'com_${TM_COMPONENT/(.+)/\L\1/g}');
		}
	}

	/**
	 * Method to test whether a record can have its state edited.
	 *
	 * @param   object  \$record  A record object.
	 *
	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.
	 *
	 * @since   $TM_VERSION
	 */
	protected function canEditState(\$record)
	{
		// Get the current user object.
		\$user = JFactory::getUser();

		// Check for existing ${1/(.+)/\L\1/g}.
		if (!empty(\$record->id))
		{
			return \$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}');
		}
		// Default to component settings if neither ${1/(.+)/\L\1/g}.
		else
		{
			return parent::canEditState('com_${TM_COMPONENT/(.+)/\L\1/g}');
		}
	}

	/**
	 * Prepare and sanitise the table data prior to saving.
	 *
	 * @param   JTable  \$table  A JTable object.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function prepareTable(\$table)
	{
		// Initialise variables.
		\$date = JFactory::getDate();
		\$user = JFactory::getUser();

		\$table->${2/(.+)/\L\1/g} = htmlspecialchars_decode(\$table->${2:title}, ENT_QUOTES);

		if (empty(\$table->id))
		{
			// Set ordering to the last item if not set.
			if (empty(\$table->ordering))
			{
				// Initialiase variables.
				\$db    = JFactory::getDbo();
				\$query = \$db->getQuery(true);

				// Create the base select statement.
				\$query->select('MAX(ordering)');
				\$query->from('#__${TM_COMPONENT/(.+)/\L\1/g}${4:_${3/(.+)/\L\1/g}}');

				// Set the query and load the result.
				\$db->setQuery(\$query);
				\$max = \$db->loadResult();

				\$table->ordering = \$max + 1;
			}
			else
			{
				// Set the values.
				\$table->modified    = \$date->toSql();
				\$table->modified_by = \$user->get('id');
			}
		}

		// Reorder the ${3:${1/(.+)/\L\1/g}s} so the new ${1/(.+)/\L\1/g} is first.
		if (empty(\$table->id))
		{
			\$table->reorder('state >= 0');
		}
	}

	/**
	 * Returns a Table object, always creating it.
	 *
	 * @param   type    \$type    The table type to instantiate.
	 * @param   string  \$prefix  A prefix for the table class name. Optional.
	 * @param   array   \$config  Configuration array for model. Optional.
	 *
	 * @return  JTable    A database object.
	 *
	 * @since   $TM_VERSION
	 */
	public function getTable(\$type = '${1/(.+)/\u\1/g}', \$prefix = '${TM_COMPONENT/(.+)/\u\1/g}Table', \$config = array())
	{
		return JTable::getInstance(\$type, \$prefix, \$config);
	}

	/**
	 * Method to get the record form.
	 *
	 * @param   array    \$data      Data for the form.
	 * @param   boolean  \$loadData  True if the form is to load its own data (default case), false if not.
	 *
	 * @return  mixed  A JForm object on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getForm(\$data = array(), \$loadData = true)
	{
		// Get the form.
		\$form = \$this->loadForm('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', '${1/(.+)/\L\1/g}', array('control' => 'jform', 'load_data' => \$loadData));

		if (empty(\$form))
		{
			return false;
		}

		\$jinput = JFactory::getApplication()->input;

		// The front end calls this model and uses a_id to avoid id clashes so we need to check for that first.
		if (\$jinput->get('a_id'))
		{
			\$id = \$jinput->get('a_id', 0);
		}
		// The back end uses id so we use that the rest of the time and set it to 0 by default.
		else
		{
			\$id = \$jinput->get('id', 0);
		}

		// Determine correct permissions to check.
		if (\$this->getState('${1/(.+)/\L\1/g}.id'))
		{
			\$id = \$this->getState('${1/(.+)/\L\1/g}.id');
		}

		// Get the current user object.
		\$user = JFactory::getUser();

		// Check for existing ${1/(.+)/\L\1/g}.
		// Modify the form based on Edit State access controls.
		if (\$id == 0 && (!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}')))
		{
			// Disable fields for display.
			\$form->setFieldAttribute('state', 'disabled', 'true');
			\$form->setFieldAttribute('ordering', 'disabled', 'true');

			// Disable fields while saving.
			// The controller has already verified this is an ${1/(.+)/\L\1/g} you can edit.
			\$form->setFieldAttribute('state', 'filter', 'unset');
			\$form->setFieldAttribute('ordering', 'filter', 'unset');
		}

		return \$form;
	}

	/**
	 * Method to get the data that should be injected in the form.
	 *
	 * @return  mixed  The data for the form.
	 *
	 * @since   $TM_VERSION
	 */
	protected function loadFormData()
	{
		// Check the session for previously entered form data.
		\$app  = JFactory::getApplication();
		\$data = \$app->getUserState('com_${TM_COMPONENT/(.+)/\L\1/g}.edit.${1/(.+)/\L\1/g}.data', array());

		if (empty(\$data))
		{
			\$data = \$this->getItem();
		}

		\$this->preprocessData('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', \$data);

		return \$data;
	}
}

]]></content>
	<tabTrigger>jadminmodeledit-mini</tabTrigger>
	<scope>source.php</scope>
</snippet>
