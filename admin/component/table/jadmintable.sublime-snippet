<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} Table class.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Table${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JTable
{
	/**
	 * Helper object for storing and deleting tag information.
	 *
	 * @var     JHelperTags
	 * @since   $TM_VERSION
	 */
	protected \$tagsHelper = null;

	/**
	 * Constructor
	 *
	 * @param   JDatabase  &\$db  Driver A database connector object.
	 *
	 * @since   $TM_VERSION
	 */
	public function __construct(& \$db)
	{
		parent::__construct('#__${TM_COMPONENT/(.+)/\L\1/g}${2:_${1/(.+)/\L\1/g}s}', 'id', \$db);

		\$this->tagsHelper = new JHelperTags;
		\$this->tagsHelper->typeAlias = 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}';
	}

	/**
	 * Method to compute the default name of the asset.
	 * The default name is in the form table_name.id
	 * where id is the value of the primary key of the table.
	 *
	 * @return  string
	 *
	 * @since   $TM_VERSION
	 */
	protected function _getAssetName()
	{
		\$k = \$this->_tbl_key;
		return 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.' . (int) \$this->\$k;
	}

	/**
	 * Method to return the title to use for the asset table.
	 *
	 * @return  string
	 *
	 * @since   $TM_VERSION
	 */
	protected function _getAssetTitle()
	{
		return \$this->${4/(.+)/\L\1/g};
	}

	/**
	 * Method to get the parent asset id for the record.
	 *
	 * @param   JTable   \$table  A JTable object (optional) for the asset parent.
	 * @param   integer  \$id     The id (optional) of the content.
	 *
	 * @return  integer
	 *
	 * @since   $TM_VERSION
	 */
	protected function _getAssetParentId(\$table = null, \$id = null)
	{
		\$assetId = null;

		// This is a ${1/(.+)/\L\1/g} under a category.
		if (\$this->catid)
		{
			// Build the query to get the asset id for the parent category.
			\$query = \$this->_db->getQuery(true)
				->select(\$this->_db->quoteName('asset_id'))
				->from(\$this->_db->quoteName('#__categories'))
				->where(\$this->_db->quoteName('id') . ' = ' . (int) \$this->catid);

			// Get the asset id from the database.
			\$this->_db->setQuery(\$query);
			if (\$result = \$this->_db->loadResult())
			{
				\$assetId = (int) \$result;
			}
		}

		// Return the asset id.
		if (\$assetId)
		{
			return \$assetId;
		}
		else
		{
			return parent::_getAssetParentId(\$table, \$id);
		}
	}

	/**
	 * Overloaded bind function to pre-process the params.
	 *
	 * @param   array  \$array   Named array.
	 * @param   mixed  \$ignore  An optional array or space separated list of properties
	 *                          to ignore while binding. [optional]
	 *
	 * @return  null|string  Null is operation was satisfactory, otherwise returns an error.
	 *
	 * @see     JTable:bind
	 * @since   $TM_VERSION
	 */
	public function bind(\$array, \$ignore = '')
	{
		if (isset(\$array['params']) && is_array(\$array['params']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['params']);
			\$array['params'] = (string) \$registry;
		}

		if (isset(\$array['metadata']) && is_array(\$array['metadata']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['metadata']);
			\$array['metadata'] = (string) \$registry;
		}

		if (isset(\$array['images']) && is_array(\$array['images']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['images']);
			\$array['images'] = (string) \$registry;
		}

		// Bind the rules.
		if (isset(\$array['rules']) && is_array(\$array['rules']))
		{
			\$rules = new JAccessRules(\$array['rules']);
			\$this->setRules(\$rules);
		}

		return parent::bind(\$array, \$ignore);
	}

	/**
	 * Overloaded check method to ensure data integrity.
	 *
	 * @return  boolean  True on success.
	 *
	 * @see     JTable::check
	 * @since   $TM_VERSION
	 */
	public function check()
	{
		// Check for valid ${4/(.+)/\L\1/g}.
		if (trim(\$this->${4:title}) == '')
		{
			\$this->setError(JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}'));
			return false;
		}

		// Check for existing ${4/(.+)/\L\1/g}.
		\$query = 'SELECT id FROM #__${TM_COMPONENT/(.+)/\L\1/g}${2/(.+)/\L\1/g} WHERE ${4/(.+)/\L\1/g} = ' . \$this->_db->quote(\$this->${4/(.+)/\L\1/g}) . ' AND catid = ' . (int) \$this->catid;
		\$this->_db->setQuery(\$query);

		\$xid = (int) \$this->_db->loadResult();

		if (\$xid && \$xid != (int) \$this->id)
		{
			\$this->setError(JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_ERR_TABLES_${4/(.+)/\U\1/g}_EXISTS'));
			return false;
		}

		// Set alias.
		if (empty(\$this->alias))
		{
			\$this->alias = \$this->${4/(.+)/\L\1/g};
		}

		\$this->alias = JApplication::stringURLSafe(\$this->alias);

		if (trim(str_replace('-', '', \$this->alias)) == '')
		{
			\$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");
		}

		// Check the publish down date is not earlier than publish up.
		if (\$this->publish_down > \$this->_db->getNullDate() && \$this->publish_down < \$this->publish_up)
		{
			\$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));
			return false;
		}

		// Clean up keywords -- eliminate extra spaces between phrases
		// and cr (\r) and lf (\n) characters from string.
		if (!empty(\$this->metakey))
		{
			// Only process if not empty.
			// Array of characters to remove.
			\$bad_characters = array("\n", "\r", "\"", "<", ">");

			// Remove bad characters.
			\$after_clean = JString::str_ireplace(\$bad_characters, "", \$this->metakey);

			// Create array using commas as delimiter.
			\$keys = explode(', ', \$after_clean);
			\$clean_keys = array();

			foreach (\$keys as \$key)
			{
				if (trim(\$key))
				{
					// Ignore blank keywords.
					\$clean_keys[] = trim(\$key);
				}
			}

			// Put array back together delimited by ", ".
			\$this->metakey = implode(", ", \$clean_keys);
		}

		return true;
	}

	/**
	 * Override parent delete method to delete tags information.
	 *
	 * @param   integer  \$pk  Primary key to delete.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 * @throws  UnexpectedValueException
	 */
	public function delete(\$pk = null)
	{
		\$result = parent::delete(\$pk);

		return \$result && \$this->tagsHelper->deleteTagData(\$this, \$pk);
	}

	/**
	 * Overload the store method for the ${3:${1/(.+)/\u\1/g}s} table.
	 *
	 * @param   boolean  \$updateNulls  Toggle whether null values should be updated.
	 *
	 * @return  boolean  True on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function store(\$updateNulls = false)
	{
		// Initialiase variables.
		\$date = JFactory::getDate();
		\$user = JFactory::getUser();

		if (\$this->id)
		{
			// Existing item.
			\$this->modified    = \$date->toSql();
			\$this->modified_by = \$user->get('id');
		}
		else
		{
			// New ${1/(.+)/\L\1/g}. A ${1/(.+)/\L\1/g} created and created_by field can be set by the user,
			// so we don't touch either of these if they are set.
			if (!(int) \$this->created)
			{
				\$this->created = \$date->toSql();
			}

			if (empty(\$this->created_by))
			{
				\$this->created_by = \$user->get('id');
			}
		}

		// Set publish_up to null date if not set.
		if (!\$this->publish_up)
		{
			\$this->publish_up = \$this->_db->getNullDate();
		}

		// Set publish_down to null date if not set.
		if (!\$this->publish_down)
		{
			\$this->publish_down = \$this->_db->getNullDate();
		}

		// Verify that the alias is unique.
		\$table = JTable::getInstance('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Table');

		if (\$table->load(array('alias' => \$this->alias, 'catid' => \$this->catid)) && (\$table->id != \$this->id || \$this->id == 0))
		{
			\$this->setError(JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_ERROR_UNIQUE_ALIAS'));
			return false;
		}

		\$this->tagsHelper->preStoreProcess(\$this);

		// Attempt to store the user data.
		\$result = parent::store(\$updateNulls);

		return \$result && \$this->tagsHelper->postStoreProcess(\$this);
	}

	/**
	 * Method to set the publishing state for a row or list of rows in the database
	 * table. The method respects checked out rows by other users and will attempt
	 * to checkin rows that it can after adjustments are made.
	 *
	 * @param   mixed    \$pks     An optional array of primary key values to update.  If not
	 *                             set the instance property value is used.
	 * @param   integer  \$state   The publishing state. eg. [0 = unpublished, 1 = published]
	 * @param   integer  \$userId  The user id of the user performing the operation.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 */
	public function publish(\$pks = null, \$state = 1, \$userId = 0)
	{
		// Initialiase variables.
		\$k = \$this->_tbl_key;

		// Sanitize input.
		JArrayHelper::toInteger(\$pks);
		\$userId = (int) \$userId;
		\$state  = (int) \$state;

		// If there are no primary keys set check to see if the instance key is set.
		if (empty(\$pks))
		{
			if (\$this->\$k)
			{
				\$pks = array(\$this->\$k);
			}
			// Nothing to set publishing state on, return false.
			else
			{
				\$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));
				return false;
			}
		}

		// Build the WHERE clause for the primary keys.
		\$where = \$k . '=' . implode(' OR ' . \$k . '=', \$pks);

		// Determine if there is checkin support for the table.
		if (!property_exists(\$this, 'checked_out') || !property_exists(\$this, 'checked_out_time'))
		{
			\$checkin = '';
		}
		else
		{
			\$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) \$userId . ')';
		}

		// Update the publishing state for rows with the given primary keys.
		\$this->_db->setQuery(
			'UPDATE ' . \$this->_db->quoteName(\$this->_tbl) .
			' SET ' . \$this->_db->quoteName('state') . ' = ' . (int) \$state .
			' WHERE (' . \$where . ')' .
			\$checkin
		);

		try
		{
			\$this->_db->execute();
		}
		catch (RuntimeException \$e)
		{
			\$this->setError(\$e->getMessage());
			return false;
		}

		// If checkin is supported and all rows were adjusted, check them in.
		if (\$checkin && (count(\$pks) == \$this->_db->getAffectedRows()))
		{
			// Checkin the rows.
			foreach (\$pks as \$pk)
			{
				\$this->checkin(\$pk);
			}
		}

		// If the JTable instance value is in the list of primary keys that were set, set the instance.
		if (in_array(\$this->\$k, \$pks))
		{
			\$this->state = \$state;
		}

		\$this->setError('');

		return true;
	}
}

]]></content>
	<tabTrigger>jadmintable</tabTrigger>
	<scope>source.php</scope>
</snippet>
