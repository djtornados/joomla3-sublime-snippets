<snippet>
	<content><![CDATA[/**
 * View class for a list of ${1/(.+)/\L\1/g} ${2:plural}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}View${1:Featured} extends JViewLegacy
{
	protected \$items;

	protected \$pagination;

	protected \$state;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  A string if successful, otherwise a JError object.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		// Initialise variables.
		\$this->items      = \$this->get('Items');
		\$this->pagination = \$this->get('Pagination');
		\$this->state      = \$this->get('State');
		\$this->authors    = \$this->get('Authors');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseError(500, implode("\n", \$errors));

			return false;
		}

		// Load the submenu.
		${TM_COMPONENT/(.+)/\u\1/g}Helper::addSubmenu('${1/(.+)/\L\1/g}');

		// Levels filter.
		\$options   = array();
		\$options[] = JHtml::_('select.option', '1', JText::_('J1'));
		\$options[] = JHtml::_('select.option', '2', JText::_('J2'));
		\$options[] = JHtml::_('select.option', '3', JText::_('J3'));
		\$options[] = JHtml::_('select.option', '4', JText::_('J4'));
		\$options[] = JHtml::_('select.option', '5', JText::_('J5'));
		\$options[] = JHtml::_('select.option', '6', JText::_('J6'));
		\$options[] = JHtml::_('select.option', '7', JText::_('J7'));
		\$options[] = JHtml::_('select.option', '8', JText::_('J8'));
		\$options[] = JHtml::_('select.option', '9', JText::_('J9'));
		\$options[] = JHtml::_('select.option', '10', JText::_('J10'));

		\$this->f_levels = \$options;

		\$this->addToolbar();
		\$this->sidebar = JHtmlSidebar::render();

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function addToolbar()
	{
		// Initialise variables.
		\$state = \$this->get('State');
		\$canDo = ${TM_COMPONENT/(.+)/\u\1/g}Helper::getActions();
		\$user  = JFactory::getUser();

		JToolbarHelper::title(JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_MANAGER_${1/(.+)/\U\1/g}_TITLE'), '${1/(.+)/\L\1/g}.png');

		if (\$canDo->get('core.create'))
		{
			JToolbarHelper::addNew('${3:${2/(.+)(s\b)/\L\1/g}}.add');
		}
		if ((\$canDo->get('core.edit')) || (\$canDo->get('core.edit.own')))
		{
			JToolbarHelper::editList('${3/(.+)/\L\1/g}.edit');
		}

		if (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::publish('${4:${2/(.+)/\L\1/g}}.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('${4/(.+)/\L\1/g}.unpublish', 'JTOOLBAR_UNPUBLISH', true);
			JToolbarHelper::custom('${1/(.+)/\L\1/g}.delete', 'remove.png', 'remove_f2.png', 'JTOOLBAR_REMOVE', true);
			JToolbarHelper::archiveList('${4/(.+)/\L\1/g}.archive');
			JToolbarHelper::checkin('${4/(.+)/\L\1/g}.checkin');
		}

		if (\$state->get('filter.published') == - 2 && \$canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('', '${4/(.+)/\L\1/g}.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('${4/(.+)/\L\1/g}.trash');
		}

		if (\$canDo->get('core.admin'))
		{
			JToolbarHelper::preferences('com_${TM_COMPONENT/(.+)/\L\1/g}');
		}

		JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);

		JHtmlSidebar::setAction('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}');

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_PUBLISHED'),
			'filter_published',
			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', \$this->state->get('filter.published'), true)
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_MAX_LEVELS'),
			'filter_level',
			JHtml::_('select.options', \$this->f_levels, 'value', 'text', \$this->state->get('filter.level'))
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_ACCESS'),
			'filter_access',
			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', \$this->state->get('filter.access'))
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_AUTHOR'),
			'filter_author_id',
			JHtml::_('select.options', \$this->authors, 'value', 'text', \$this->state->get('filter.author_id'))
		);

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_LANGUAGE'),
			'filter_language',
			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', \$this->state->get('filter.language'))
		);
	}

	/**
	 * Returns an array of fields the table can be sorted by.
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getSortFields()
	{
		return array(
			'fp.ordering' => JText::_('JGRID_HEADING_ORDERING'),
			'a.state' => JText::_('JSTATUS'),
			'a.${5:title}' => JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_HEADING_${5/(.+)/\U\1/g}'),
			'access_level' => JText::_('JGRID_HEADING_ACCESS'),
			'a.created_by' => JText::_('JAUTHOR'),
			'language' => JText::_('JGRID_HEADING_LANGUAGE'),
			'a.created' => JText::_('JDATE'),
			'a.id' => JText::_('JGRID_HEADING_ID')
		);
	}
}

]]></content>
	<tabTrigger>jadminviewfeatured-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
