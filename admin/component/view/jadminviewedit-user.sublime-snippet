<snippet>
	<content><![CDATA[/**
 * View to edit a ${1/(.+)/\L\1/g}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}View${1:User} extends JViewLegacy
{
	/**
	 * The form to use for the view.
	 *
	 * @var     JForm
	 */
	protected \$form;

	/**
	 * The item to edit.
	 *
	 * @var     JObject
	 */
	protected \$item;

	/**
	 * The group list.
	 *
	 * @var     array
	 */
	protected \$grouplist;

	/**
	 * The groups.
	 *
	 * @var     array
	 */
	protected \$groups;

	/**
	 * The model state.
	 *
	 * @var     JObject
	 */
	protected \$state;

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JViewLegacy
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		parent::__construct(\$config);

		// Load the backend helper.
		require_once JPATH_ADMINISTRATOR . '/components/com_users/helpers/users.php';

		// Load the users component language file.
		\$lang = JFactory::getLanguage();
		\$lang->load('com_users', JPATH_ADMINISTRATOR);
	}

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  A string if successful, otherwise a JError object.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		try
		{
			// Initialiase variables.
			\$this->form      = \$this->get('Form');
			\$this->item      = \$this->get('Item');
			\$this->grouplist = \$this->get('Groups');
			\$this->groups    = \$this->get('AssignedGroups');
			\$this->state     = \$this->get('State');
		}
		catch (Exception \$e)
		{
			JErrorPage::render(\$e);

			return false;
		}

		\$this->form->setValue('password', null);
		\$this->form->setValue('password2', null);

		\$this->addToolbar();

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function addToolbar()
	{
		JFactory::getApplication()->input->set('hidemainmenu', true);

		// Initialiase variables.
		\$user      = JFactory::getUser();
		\$canDo     = UsersHelper::getActions();
		\$isNew     = (\$this->item->id == 0);
		\$isProfile = \$this->item->id == \$user->id;

		JToolbarHelper::title(JText::_(\$isNew ? 'COM_${TM_COMPONENT/(.+)/\U\1/g}_PAGE_ADD_${1/(.+)/\U\1/g}' : (\$isProfile ? 'COM_${TM_COMPONENT/(.+)/\U\1/g}_PAGE_EDIT_PROFILE' : 'COM_${TM_COMPONENT/(.+)/\U\1/g}_PAGE_EDIT_${1/(.+)/\U\1/g}')), \$isNew ? '${1/(.+)/\L\1/g}-add' : (\$isProfile ? '${1/(.+)/\L\1/g}-profile' : '${1/(.+)/\L\1/g}-edit'));

		if (\$canDo->get('core.edit')||\$canDo->get('core.create'))
		{
			JToolbarHelper::apply('${1/(.+)/\L\1/g}.apply');
			JToolbarHelper::save('${1/(.+)/\L\1/g}.save');
		}

		if (\$canDo->get('core.create')&&\$canDo->get('core.manage'))
		{
			JToolbarHelper::save2new('${1/(.+)/\L\1/g}.save2new');
		}

		if (empty(\$this->item->id))
		{
			JToolbarHelper::cancel('${1/(.+)/\L\1/g}.cancel');
		}
		else
		{
			JToolbarHelper::cancel('${1/(.+)/\L\1/g}.cancel', 'JTOOLBAR_CLOSE');
		}

		JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);
	}
}

]]></content>
	<tabTrigger>jadminviewedit-user</tabTrigger>
	<scope>source.php</scope>
</snippet>
