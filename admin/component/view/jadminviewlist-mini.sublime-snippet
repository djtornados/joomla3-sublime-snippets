<snippet>
	<content><![CDATA[/**
 * View class for a list of ${1/(.+)/\L\1/g}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}View${1:Plural} extends JViewLegacy
{
	/**
	 * Model state object.
	 *
	 * @var     object
	 */
	protected \$state;

	/**
	 * List of update items.
	 *
	 * @var     array
	 */
	protected \$items;

	/**
	 * List pagination.
	 *
	 * @var     JPagination
	 */
	protected \$pagination;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  A string if successful, otherwise a JError object.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		// Initialise variables.
		\$this->state      = \$this->get('State');
		\$this->items      = \$this->get('Items');
		\$this->pagination = \$this->get('Pagination');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseError(500, implode("\n", \$errors));

			return false;
		}

		// We do not need toolbar in the modal window.
		if (\$this->getLayout() !== 'modal')
		{
			// Load the submenu.
			${TM_COMPONENT/(.+)/\u\1/g}Helper::addSubmenu('${1/(.+)/\L\1/g}');

			\$this->addToolbar();
			\$this->sidebar = JHtmlSidebar::render();
		}

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function addToolbar()
	{
		// Initialise variables.
		\$state = \$this->get('State');
		\$canDo = ${TM_COMPONENT/(.+)/\u\1/g}Helper::getActions(0, 0, 'com_${TM_COMPONENT/(.+)/\L\1/g}');
		\$user  = JFactory::getUser();

		JToolbarHelper::title(JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_MANAGER_${1/(.+)/\U\1/g}_TITLE'), '${1/(.+)/\L\1/g}.png');

		if (\$canDo->get('core.create'))
		{
			JToolbarHelper::addNew('${2:${1/(.+)(s\b)/\L\1/g}}.add');
		}

		if (\$canDo->get('core.edit'))
		{
			JToolbarHelper::editList('${2/(.+)/\L\1/g}.edit');
		}

		if (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::publish('${1/(.+)/\L\1/g}.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('${1/(.+)/\L\1/g}.unpublish', 'JTOOLBAR_UNPUBLISH', true);

			JToolbarHelper::archiveList('${1/(.+)/\L\1/g}.archive');
		}

		if (\$state->get('filter.state') == -2 && \$canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('', '${1/(.+)/\L\1/g}.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('${1/(.+)/\L\1/g}.trash');
		}

		if (\$canDo->get('core.admin'))
		{
			JToolbarHelper::preferences('com_${TM_COMPONENT/(.+)/\L\1/g}');
		}

		JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);

		JHtmlSidebar::setAction('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=${1/(.+)/\L\1/g}');

		JHtmlSidebar::addFilter(
			JText::_('JOPTION_SELECT_PUBLISHED'),
			'filter_state',
			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', \$this->state->get('filter.state'), true)
		);
	}

	/**
	 * Returns an array of fields the table can be sorted by.
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getSortFields()
	{
		return array(
			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),
			'a.state' => JText::_('JSTATUS'),
			'a.${3:title}' => JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_HEADING_${3/(.+)/\U\1/g}'),
			'a.id' => JText::_('JGRID_HEADING_ID')
		);
	}
}

]]></content>
	<tabTrigger>jadminviewlist-mini</tabTrigger>
	<scope>source.php</scope>
</snippet>
