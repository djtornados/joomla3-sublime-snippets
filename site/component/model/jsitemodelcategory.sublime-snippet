<snippet>
	<content><![CDATA[/**
 * ${TM_COMPONENT/(.+)/\u\1/g} Component ${1:${TM_COMPONENT/(.+)(s\b)/\u\1/g}} Model.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}ModelCategory extends JModelList
{
	/**
	 * Category items data
	 *
	 * @var     array
	 */
	protected \$_item = null;

	protected \$_articles = null;

	protected \$_siblings = null;

	protected \$_children = null;

	protected \$_parent = null;

	/**
	 * The category that applies.
	 *
	 * @access  protected
	 * @var     object
	 */
	protected \$_category = null;

	/**
	 * The list of other ${1/(.+)/\L\1/g} categories.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_categories = null;

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'title', 'a.title',
				'hits', 'a.hits',
				'ordering', 'a.ordering',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Initialiase variables.
		\$app    = JFactory::getApplication();
		\$params = JComponentHelper::getParams('com_${TM_COMPONENT/(.+)/\L\1/g}');

		// List state information.
		\$limit = \$app->getUserStateFromRequest('global.list.limit', 'limit', \$app->getCfg('list_limit'), 'uint');
		\$this->setState('list.limit', \$limit);

		\$limitstart = \$app->input->get('limitstart', 0, 'uint');
		\$this->setState('list.start', \$limitstart);

		\$orderCol = \$app->input->get('filter_order', 'ordering');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		\$listOrder = \$app->input->get('filter_order_Dir', 'ASC');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		\$id = \$app->input->get('id', 0, 'int');
		\$this->setState('category.id', \$id);

		// Get the current user object.
		\$user = JFactory::getUser();

		if ((!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${TM_COMPONENT/(.+)/\L\1/g}')))
		{
			// Limit to published for people who can't edit or edit.state.
			\$this->setState('filter.state', 1);

			// Filter by start and end dates.
			\$this->setState('filter.publish_date', true);
		}

		\$this->setState('filter.language', \$app->getLanguageFilter());

		// Load the parameters.
		\$this->setState('params', \$params);
	}

	/**
	 * Method to get a list of items.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 */
	public function getItems()
	{
		// Invoke the parent getItems method to get the main list.
		\$items = parent::getItems();

		// Convert the params field into an object, saving original in _params.
		for (\$i = 0, \$n = count(\$items); \$i < \$n; \$i++)
		{
			if (!isset(\$this->_params))
			{
				\$params = new JRegistry;
				\$params->loadString(\$items[\$i]->params);
				\$items[\$i]->params = \$params;
			}
		}

		return \$items;
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Initialiase variables.
		\$user   = JFactory::getUser();
		\$groups = implode(', ', \$user->getAuthorisedViewLevels());

		// Create a new query object.
		\$db     = \$this->getDbo();
		\$query  = \$db->getQuery(true);

		// Select required fields from the categories.
		\$query->select(\$this->getState('list.select', 'a.*'))
			->from(\$db->quoteName('#__${TM_COMPONENT/(.+)/\L\1/g}') . ' AS a')
			->where('a.access IN (' . \$groups . ')');

		// Join over the categories.
		\$query->select('c.title AS category_title, c.path AS category_route, c.access AS category_access, c.alias AS category_alias')
			->join('LEFT', '#__categories AS c ON c.id = a.catid');

		// Filter by category.
		if (\$categoryId = \$this->getState('category.id'))
		{
			\$query->where('a.catid = ' . (int) \$categoryId)
				->where('c.access IN (' . \$groups . ')');

			// Filter by published category.
			\$cpublished = \$this->getState('filter.c.published');

			if (is_numeric(\$cpublished))
			{
				\$query->where('c.published = ' . (int) \$cpublished);
			}
		}

		// Join over the users for the author and modified_by names.
		\$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")
			->select("ua.email AS author_email")
			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')
			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');

		// Filter by state.
		\$state = \$this->getState('filter.state');

		if (is_numeric(\$state))
		{
			\$query->where('a.state = ' . (int) \$state);
		}

		// Do not show trashed links on the front-end.
		\$query->where('a.state != -2');

		// Filter by start and end dates.
		\$nullDate = \$db->quote(\$db->getNullDate());
		\$date = JFactory::getDate();
		\$nowDate = \$db->quote(\$date->toSql());

		if (\$this->getState('filter.publish_date'))
		{
			\$query->where('(a.publish_up = ' . \$nullDate . ' OR a.publish_up <= ' . \$nowDate . ')')
				->where('(a.publish_down = ' . \$nullDate . ' OR a.publish_down >= ' . \$nowDate . ')');
		}

		// Filter by language.
		if (\$this->getState('filter.language'))
		{
			\$query->where('a.language in (' . \$db->quote(JFactory::getLanguage()->getTag()) . ', ' . \$db->quote('*') . ')');
		}

		// Add the list ordering clause.
		\$query->order(\$db->escape(\$this->getState('list.ordering', 'a.ordering')) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		return \$query;
	}

	/**
	 * Method to get category data for the current category
	 *
	 * @return  object
	 *
	 * @since   $TM_VERSION
	 */
	public function getCategory()
	{
		if (!is_object(\$this->_item))
		{
			// Initialiase variables.
			\$app = JFactory::getApplication();
			\$menu = \$app->getMenu();
			\$active = \$menu->getActive();
			\$params = new JRegistry;

			if (\$active)
			{
				\$params->loadString(\$active->params);
			}

			\$options = array();
			\$options['countItems'] = \$params->get('show_cat_num_links_cat', 1) || \$params->get('show_empty_categories', 0);
			\$categories = JCategories::getInstance('${TM_COMPONENT/(.+)/\u\1/g}', \$options);
			\$this->_item = \$categories->get(\$this->getState('category.id', 'root'));

			if (is_object(\$this->_item))
			{
				\$this->_children = \$this->_item->getChildren();
				\$this->_parent = false;

				if (\$this->_item->getParent())
				{
					\$this->_parent = \$this->_item->getParent();
				}

				\$this->_rightsibling = \$this->_item->getSibling();
				\$this->_leftsibling = \$this->_item->getSibling(false);
			}
			else
			{
				\$this->_children = false;
				\$this->_parent = false;
			}
		}

		return \$this->_item;
	}

	/**
	 * Get the parent category
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function getParent()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_parent;
	}

	/**
	 * Get the sibling (adjacent) categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function &getLeftSibling()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_leftsibling;
	}

	/**
	 * Get the sibling (adjacent) categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function &getRightSibling()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_rightsibling;
	}

	/**
	 * Get the child categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function &getChildren()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_children;
	}
}

]]></content>
	<tabTrigger>jsitemodelcategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
