<snippet>
	<content><![CDATA[/**
 * ${TM_COMPONENT/(.+)/\u\1/g} Component HTML Helper.
 *
 * @static
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
abstract class JHtmlIcon
{
	/**
	 * Method to generate a link to the create item page.
	 *
	 * @param   JRegistry  \$params    The item parameters.
	 * @param   array      \$attribs   Optional attributes for the link.
	 * @param   boolean    \$legacy    True to use legacy images, false to use icomoon based graphic.
	 *
	 * @return  string  The HTML markup for the create item link.
	 *
	 * @since   $TM_VERSION
	 */
	public static function create(\$params, \$attribs = array(), \$legacy = false)
	{
		// Initialiase variables.
		\$uri = JURI::getInstance();
		\$url = 'index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&task=${1:singular}.add&return=' . base64_encode(\$uri) . '&${TM_COMPONENT/(.)(.+)/\L\1/g}_id=0';

		if (\$params->get('show_icons'))
		{
			if (\$legacy)
			{
				\$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);
			}
			else
			{
				\$text = '<span class="icon-plus"></span>&#160;' . JText::_('JNEW') . '&#160;';
			}
		}
		else
		{
			\$text = JText::_('JNEW') . '&#160;';
		}

		// Add the button classes to the attribs array.
		if (isset(\$attribs['class']))
		{
			\$attribs['class'] = \$attribs['class'] . ' btn btn-primary';
		}
		else
		{
			\$attribs['class'] = 'btn btn-primary';
		}

		\$button = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

		\$output = '<span class="hasTip" title="' . JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_CREATE_${1/(.+)/\U\1/g}') . '">' . \$button . '</span>';

		return \$output;
	}

	/**
	 * Method to generate a link to the email item page for the given ${1/(.+)/\L\1/g}.
	 *
	 * @param   object     \$${1/(.+)/\L\1/g}  The ${1/(.+)/\L\1/g} information.
	 * @param   JRegistry  \$params   The item parameters.
	 * @param   array      \$attribs  Optional attributes for the link.
	 * @param   boolean    \$legacy   True to use legacy images, false to use icomoon based graphic.
	 *
	 * @return  string  The HTML markup for the email item link.
	 *
	 * @since   $TM_VERSION
	 */
	public static function email(\$${1/(.+)/\L\1/g}, \$params, \$attribs = array(), \$legacy = false)
	{
		require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';

		// Initialiase variables.
		\$uri      = JURI::getInstance();
		\$base     = \$uri->toString(array('scheme', 'host', 'port'));
		\$template = JFactory::getApplication()->getTemplate();
		\$link     = \$base . JRoute::_(${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${1/(.+)/\u\1/g}Route(\$${1/(.+)/\L\1/g}->slug), false);
		\$url      = 'index.php?option=com_mailto&tmpl=component&template=' . \$template . '&link=' . MailToHelper::addLink(\$link);

		\$status = 'width=400,height=350,menubar=yes,resizable=yes';

		if (\$params->get('show_icons'))
		{
			if (\$legacy)
			{
				\$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);
			}
			else
			{
				\$text = '<span class="icon-envelope"></span> ' . JText::_('JGLOBAL_EMAIL');
			}
		}
		else
		{
			\$text = JText::_('JGLOBAL_EMAIL');
		}

		\$attribs['title']   = JText::_('JGLOBAL_EMAIL');
		\$attribs['onclick'] = "window.open(this.href,'win2','" . \$status . "'); return false;";

		\$output = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

		return \$output;
	}

	/**
	 * Display an edit icon for the ${1/(.+)/\L\1/g}.
	 *
	 * This icon will not display in a popup window, nor if the ${1/(.+)/\L\1/g} is trashed.
	 * Edit access checks must be performed in the calling code.
	 *
	 * @param   object     \$${1/(.+)/\L\1/g}  The ${1/(.+)/\L\1/g} information.
	 * @param   JRegistry  \$params   The item parameters.
	 * @param   array      \$attribs  Optional attributes for the link.
	 * @param   boolean    \$legacy   True to use legacy images, false to use icomoon based graphic.
	 *
	 * @return  string  The HTML for the ${1/(.+)/\L\1/g} edit icon.
	 *
	 * @since   $TM_VERSION
	 */
	public static function edit(\$${1/(.+)/\L\1/g}, \$params, \$attribs = array(), \$legacy = false)
	{
		// Initialiase variables.
		\$user = JFactory::getUser();
		\$uri  = JURI::getInstance();

		// Ignore if in a popup window.
		if (\$params && \$params->get('popup'))
		{
			return;
		}

		// Ignore if the state is negative (trashed).
		if (\$${1/(.+)/\L\1/g}->state < 0)
		{
			return;
		}

		JHtml::_('behavior.tooltip');

		// Show checked_out icon if the ${1/(.+)/\L\1/g} is checked out by a different user.
		if (property_exists(\$${1/(.+)/\L\1/g}, 'checked_out') && property_exists(\$${1/(.+)/\L\1/g}, 'checked_out_time') && \$${1/(.+)/\L\1/g}->checked_out > 0 && \$${1/(.+)/\L\1/g}->checked_out != \$user->get('id'))
		{
			\$checkoutUser = JFactory::getUser(\$${1/(.+)/\L\1/g}->checked_out);
			\$button       = JHtml::_('image', 'system/checked_out.png', null, null, true);
			\$date         = JHtml::_('date', \$${1/(.+)/\L\1/g}->checked_out_time);
			\$tooltip      = JText::_('JLIB_HTML_CHECKED_OUT') . ' :: ' . JText::sprintf('COM_${TM_COMPONENT/(.+)/\U\1/g}_CHECKED_OUT_BY', \$checkoutUser->name) . ' <br /> ' . \$date;

			return '<span class="hasTip" title="' . htmlspecialchars(\$tooltip, ENT_COMPAT, 'UTF-8') . '">' . \$button . '</span>';
		}

		\$url = 'index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&task=${1/(.+)/\L\1/g}.edit&${TM_COMPONENT/(.)(.+)/\L\1/g}_id=' . \$${1/(.+)/\L\1/g}->id . '&return=' . base64_encode(\$uri);

		if (\$${1/(.+)/\L\1/g}->state == 0)
		{
			\$overlib = JText::_('JUNPUBLISHED');
		}
		else
		{
			\$overlib = JText::_('JPUBLISHED');
		}

		\$date   = JHtml::_('date', \$${1/(.+)/\L\1/g}->created);
		\$author = \$${1/(.+)/\L\1/g}->created_by_alias ? \$${1/(.+)/\L\1/g}->created_by_alias : \$${1/(.+)/\L\1/g}->author;

		\$overlib .= '&lt;br /&gt;';
		\$overlib .= \$date;
		\$overlib .= '&lt;br /&gt;';
		\$overlib .= JText::sprintf('COM_${TM_COMPONENT/(.+)/\U\1/g}_WRITTEN_BY', htmlspecialchars(\$author, ENT_COMPAT, 'UTF-8'));

		if (\$legacy)
		{
			\$icon = \$${1/(.+)/\L\1/g}->state ? 'edit.png' : 'edit_unpublished.png';
			\$text = JHtml::_('image', 'system/' . \$icon, JText::_('JGLOBAL_EDIT'), null, true);
		}
		else
		{
			\$icon = \$${1/(.+)/\L\1/g}->state ? 'edit' : 'eye-close';
			\$text = '<span class="hasTip icon-' . \$icon . ' tip" title="' . JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_EDIT_ITEM') . ' :: ' . \$overlib . '"></span>&#160;' . JText::_('JGLOBAL_EDIT') . '&#160;';
		}

		\$output = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

		return \$output;
	}

	/**
	 * Method to generate a popup link to print an ${1/(.+)/\L\1/g}.
	 *
	 * @param   object     \$${1/(.+)/\L\1/g}  The ${1/(.+)/\L\1/g} information.
	 * @param   JRegistry  \$params   The item parameters.
	 * @param   array      \$attribs  Optional attributes for the link.
	 * @param   boolean    \$legacy   True to use legacy images, false to use icomoon based graphic.
	 *
	 * @return  string  The HTML markup for the popup link.
	 *
	 * @since   $TM_VERSION
	 */
	public static function print_popup(\$${1/(.+)/\L\1/g}, \$params, \$attribs = array(), \$legacy = false)
	{
		// Initialiase variables.
		\$url  = ${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${1/(.+)/\u\1/g}Route(\$${1/(.+)/\L\1/g}->slug);
		\$url .= '&tmpl=component&print=1&layout=default&page=' . @ \$request->limitstart;

		\$status = 'status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no';

		// Checks template image directory for image, if non found default are loaded.
		if (\$params->get('show_icons'))
		{
			if (\$legacy)
			{
				\$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);
			}
			else
			{
				\$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';
			}
		}
		else
		{
			\$text = JText::_('JGLOBAL_PRINT');
		}

		\$attribs['title']   = JText::_('JGLOBAL_PRINT');
		\$attribs['onclick'] = "window.open(this.href,'win2','" . \$status . "'); return false;";
		\$attribs['rel']     = 'nofollow';

		return JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);
	}

	/**
	 * Method to generate a link to print an ${1/(.+)/\L\1/g}.
	 *
	 * @param   object     \$${1/(.+)/\L\1/g}  Not used, @deprecated for 4.0.
	 * @param   JRegistry  \$params   The item parameters.
	 * @param   array      \$attribs  Not used, @deprecated for 4.0.
	 * @param   boolean    \$legacy   True to use legacy images, false to use icomoon based graphic.
	 *
	 * @return  string  The HTML markup for the popup link.
	 *
	 * @since   $TM_VERSION
	 */
	public static function print_screen(\$${1/(.+)/\L\1/g}, \$params, \$attribs = array(), \$legacy = false)
	{
		// Checks template image directory for image, if none found default are loaded.
		if (\$params->get('show_icons'))
		{
			if (\$legacy)
			{
				\$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);
			}
			else
			{
				\$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';
			}
		}
		else
		{
			\$text = JText::_('JGLOBAL_PRINT');
		}

		return '<a href="#" onclick="window.print();return false;">' . \$text . '</a>';
	}
}

]]></content>
	<tabTrigger>jsitehtmlicon-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
